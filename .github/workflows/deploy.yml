name: Deploy Recipe App Services

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment Type'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - rebuild
      services:
        description: 'Services to deploy (comma-separated: auth,recipe,users,nestjs-recipe or "all")'
        required: true
        default: 'all'
        type: string
      version:
        description: 'Version tag (required for production deployment, format: x.x.x)'
        required: false
        type: string
      environment:
        description: 'Target environment (for production deployment)'
        required: false
        default: 'prod'
        type: string
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
      - master
      - develop

env:
  DOCKER_REGISTRY: gabcat/recipe-app
  NODE_VERSION: '22'

jobs:
  prepare:
    name: Prepare Deployment Matrix
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-matrix.outputs.services }}
      deployment_type: ${{ steps.set-deployment.outputs.deployment_type }}
      version: ${{ steps.set-version.outputs.version }}
      environment: ${{ steps.set-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set deployment type
        id: set-deployment
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "deployment_type=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master") ]]; then
            echo "deployment_type=staging" >> $GITHUB_OUTPUT
          else
            echo "deployment_type=${{ github.event.inputs.deployment_type || 'staging' }}" >> $GITHUB_OUTPUT
          fi

      - name: Set version
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
          fi

      - name: Set environment
        id: set-environment
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_OUTPUT
          fi

      - name: Set services matrix
        id: set-matrix
        run: |
          ALL_SERVICES='["auth", "recipe", "users", "nestjs-recipe"]'
          
          if [[ "${{ github.event.inputs.services }}" == "all" || -z "${{ github.event.inputs.services }}" ]]; then
            echo "services=$ALL_SERVICES" >> $GITHUB_OUTPUT
          else
            # Convert comma-separated string to JSON array
            SERVICES_INPUT="${{ github.event.inputs.services }}"
            SERVICES_ARRAY=$(echo "$SERVICES_INPUT" | tr ',' '\n' | sed 's/^/"/;s/$/"/' | paste -sd, | sed 's/^/[/;s/$/]/')
            echo "services=$SERVICES_ARRAY" >> $GITHUB_OUTPUT
          fi

  validate:
    name: Validate Inputs
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.deployment_type == 'production'
    steps:
      - name: Validate version format
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format x.x.x (e.g., 1.0.0)"
            exit 1
          fi

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [prepare, validate]
    if: always() && (needs.validate.result == 'success' || needs.validate.result == 'skipped')
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Set build context and dockerfile
        id: build-context
        run: |
          SERVICE="${{ matrix.service }}"
          echo "context=./apps/$SERVICE" >> $GITHUB_OUTPUT
          echo "dockerfile=./apps/$SERVICE/Dockerfile" >> $GITHUB_OUTPUT

      - name: Build and push - Staging
        if: needs.prepare.outputs.deployment_type == 'staging' || needs.prepare.outputs.deployment_type == 'rebuild'
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.build-context.outputs.context }}
          file: ${{ steps.build-context.outputs.dockerfile }}
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}:${{ matrix.service }}-staging
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push - Production
        if: needs.prepare.outputs.deployment_type == 'production'
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.build-context.outputs.context }}
          file: ${{ steps.build-context.outputs.dockerfile }}
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}:${{ matrix.service }}-${{ needs.prepare.outputs.version }}
            ${{ env.DOCKER_REGISTRY }}:${{ matrix.service }}-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, build-and-deploy]
    if: needs.prepare.outputs.deployment_type == 'production' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ needs.prepare.outputs.version }}
          body: |
            ## Release ${{ needs.prepare.outputs.version }}
            
            ### Services Deployed
            ${{ join(fromJson(needs.prepare.outputs.services), ', ') }}
            
            ### Docker Images
            ${{ join(fromJson(needs.prepare.outputs.services), format('- {0}:{1}-{2}', env.DOCKER_REGISTRY, '%s', needs.prepare.outputs.version)) }}
            
            ### Changes
            - Automated release created from tag push
          draft: false
          prerelease: false

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [prepare, build-and-deploy]
    if: always()
    steps:
      - name: Deployment Success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "Services: ${{ join(fromJson(needs.prepare.outputs.services), ', ') }}"
          echo "Type: ${{ needs.prepare.outputs.deployment_type }}"
          echo "Version: ${{ needs.prepare.outputs.version }}"
          echo "Environment: ${{ needs.prepare.outputs.environment }}"

      - name: Deployment Failed
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          exit 1

      # Add notification integrations here (Slack, Discord, etc.)
      # - name: Notify Slack
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ needs.build-and-deploy.result }}
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }} 